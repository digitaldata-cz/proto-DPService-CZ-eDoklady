// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: DPService-CZ-Edoklady.proto

package proto_DPService_CZ_eDoklady

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_DPService_CZ_Edoklady_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_DPService_CZ_Edoklady_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_DPService_CZ_Edoklady_proto_rawDescGZIP(), []int{0}
}

type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ready      bool   `protobuf:"varint,1,opt,name=Ready,proto3" json:"Ready,omitempty"`
	Status     string `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty"`
	AppName    string `protobuf:"bytes,3,opt,name=AppName,proto3" json:"AppName,omitempty"`
	AppVersion string `protobuf:"bytes,4,opt,name=AppVersion,proto3" json:"AppVersion,omitempty"`
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	mi := &file_DPService_CZ_Edoklady_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_DPService_CZ_Edoklady_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_DPService_CZ_Edoklady_proto_rawDescGZIP(), []int{1}
}

func (x *StatusResponse) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

func (x *StatusResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *StatusResponse) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *StatusResponse) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

type Certificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonName string `protobuf:"bytes,1,opt,name=CommonName,proto3" json:"CommonName,omitempty"`
}

func (x *Certificate) Reset() {
	*x = Certificate{}
	mi := &file_DPService_CZ_Edoklady_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate) ProtoMessage() {}

func (x *Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_DPService_CZ_Edoklady_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate.ProtoReflect.Descriptor instead.
func (*Certificate) Descriptor() ([]byte, []int) {
	return file_DPService_CZ_Edoklady_proto_rawDescGZIP(), []int{2}
}

func (x *Certificate) GetCommonName() string {
	if x != nil {
		return x.CommonName
	}
	return ""
}

type Certificates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certificates []string `protobuf:"bytes,1,rep,name=Certificates,proto3" json:"Certificates,omitempty"`
}

func (x *Certificates) Reset() {
	*x = Certificates{}
	mi := &file_DPService_CZ_Edoklady_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Certificates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificates) ProtoMessage() {}

func (x *Certificates) ProtoReflect() protoreflect.Message {
	mi := &file_DPService_CZ_Edoklady_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificates.ProtoReflect.Descriptor instead.
func (*Certificates) Descriptor() ([]byte, []int) {
	return file_DPService_CZ_Edoklady_proto_rawDescGZIP(), []int{3}
}

func (x *Certificates) GetCertificates() []string {
	if x != nil {
		return x.Certificates
	}
	return nil
}

type VirtualService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name             string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	QRCode           string `protobuf:"bytes,3,opt,name=QRCode,proto3" json:"QRCode,omitempty"`
	QrCodeValidUntil string `protobuf:"bytes,4,opt,name=QrCodeValidUntil,proto3" json:"QrCodeValidUntil,omitempty"`
}

func (x *VirtualService) Reset() {
	*x = VirtualService{}
	mi := &file_DPService_CZ_Edoklady_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VirtualService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualService) ProtoMessage() {}

func (x *VirtualService) ProtoReflect() protoreflect.Message {
	mi := &file_DPService_CZ_Edoklady_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualService.ProtoReflect.Descriptor instead.
func (*VirtualService) Descriptor() ([]byte, []int) {
	return file_DPService_CZ_Edoklady_proto_rawDescGZIP(), []int{4}
}

func (x *VirtualService) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *VirtualService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirtualService) GetQRCode() string {
	if x != nil {
		return x.QRCode
	}
	return ""
}

func (x *VirtualService) GetQrCodeValidUntil() string {
	if x != nil {
		return x.QrCodeValidUntil
	}
	return ""
}

type VirtualServices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VirtualServices []*VirtualService `protobuf:"bytes,1,rep,name=VirtualServices,proto3" json:"VirtualServices,omitempty"`
}

func (x *VirtualServices) Reset() {
	*x = VirtualServices{}
	mi := &file_DPService_CZ_Edoklady_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VirtualServices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualServices) ProtoMessage() {}

func (x *VirtualServices) ProtoReflect() protoreflect.Message {
	mi := &file_DPService_CZ_Edoklady_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualServices.ProtoReflect.Descriptor instead.
func (*VirtualServices) Descriptor() ([]byte, []int) {
	return file_DPService_CZ_Edoklady_proto_rawDescGZIP(), []int{5}
}

func (x *VirtualServices) GetVirtualServices() []*VirtualService {
	if x != nil {
		return x.VirtualServices
	}
	return nil
}

type TransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VirtualService *VirtualService    `protobuf:"bytes,1,opt,name=VirtualService,proto3" json:"VirtualService,omitempty"`
	Documents      []*DocumentRequest `protobuf:"bytes,2,rep,name=Documents,proto3" json:"Documents,omitempty"`
}

func (x *TransactionRequest) Reset() {
	*x = TransactionRequest{}
	mi := &file_DPService_CZ_Edoklady_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionRequest) ProtoMessage() {}

func (x *TransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_DPService_CZ_Edoklady_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionRequest.ProtoReflect.Descriptor instead.
func (*TransactionRequest) Descriptor() ([]byte, []int) {
	return file_DPService_CZ_Edoklady_proto_rawDescGZIP(), []int{6}
}

func (x *TransactionRequest) GetVirtualService() *VirtualService {
	if x != nil {
		return x.VirtualService
	}
	return nil
}

func (x *TransactionRequest) GetDocuments() []*DocumentRequest {
	if x != nil {
		return x.Documents
	}
	return nil
}

type DocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentName     string `protobuf:"bytes,1,opt,name=DocumentName,proto3" json:"DocumentName,omitempty"`
	Portait          int32  `protobuf:"varint,2,opt,name=Portait,proto3" json:"Portait,omitempty"`
	FamilyName       int32  `protobuf:"varint,3,opt,name=FamilyName,proto3" json:"FamilyName,omitempty"`
	GivenName        int32  `protobuf:"varint,4,opt,name=GivenName,proto3" json:"GivenName,omitempty"`
	ResidentAddress  int32  `protobuf:"varint,5,opt,name=ResidentAddress,proto3" json:"ResidentAddress,omitempty"`
	PersonalNumber   int32  `protobuf:"varint,6,opt,name=PersonalNumber,proto3" json:"PersonalNumber,omitempty"`
	BirthDate        int32  `protobuf:"varint,7,opt,name=BirthDate,proto3" json:"BirthDate,omitempty"`
	BirthPlace       int32  `protobuf:"varint,8,opt,name=BirthPlace,proto3" json:"BirthPlace,omitempty"`
	Nationality      int32  `protobuf:"varint,9,opt,name=Nationality,proto3" json:"Nationality,omitempty"`
	Sex              int32  `protobuf:"varint,10,opt,name=Sex,proto3" json:"Sex,omitempty"`
	Signature        int32  `protobuf:"varint,11,opt,name=Signature,proto3" json:"Signature,omitempty"`
	DocumentNumber   int32  `protobuf:"varint,12,opt,name=DocumentNumber,proto3" json:"DocumentNumber,omitempty"`
	IssueDate        int32  `protobuf:"varint,13,opt,name=IssueDate,proto3" json:"IssueDate,omitempty"`
	ExpiryDate       int32  `protobuf:"varint,14,opt,name=ExpiryDate,proto3" json:"ExpiryDate,omitempty"`
	IssuingAuthority int32  `protobuf:"varint,15,opt,name=IssuingAuthority,proto3" json:"IssuingAuthority,omitempty"`
	ChangeOfData     int32  `protobuf:"varint,16,opt,name=ChangeOfData,proto3" json:"ChangeOfData,omitempty"`
	OfficialRecords  int32  `protobuf:"varint,17,opt,name=OfficialRecords,proto3" json:"OfficialRecords,omitempty"`
	MaritalStatus    int32  `protobuf:"varint,18,opt,name=MaritalStatus,proto3" json:"MaritalStatus,omitempty"`
	Title            int32  `protobuf:"varint,19,opt,name=Title,proto3" json:"Title,omitempty"`
	AgeOver15        int32  `protobuf:"varint,20,opt,name=AgeOver15,proto3" json:"AgeOver15,omitempty"`
	AgeOver18        int32  `protobuf:"varint,21,opt,name=AgeOver18,proto3" json:"AgeOver18,omitempty"`
	AgeOver21        int32  `protobuf:"varint,22,opt,name=AgeOver21,proto3" json:"AgeOver21,omitempty"`
	AgeOver60        int32  `protobuf:"varint,23,opt,name=AgeOver60,proto3" json:"AgeOver60,omitempty"`
	AgeOver65        int32  `protobuf:"varint,24,opt,name=AgeOver65,proto3" json:"AgeOver65,omitempty"`
}

func (x *DocumentRequest) Reset() {
	*x = DocumentRequest{}
	mi := &file_DPService_CZ_Edoklady_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentRequest) ProtoMessage() {}

func (x *DocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_DPService_CZ_Edoklady_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentRequest.ProtoReflect.Descriptor instead.
func (*DocumentRequest) Descriptor() ([]byte, []int) {
	return file_DPService_CZ_Edoklady_proto_rawDescGZIP(), []int{7}
}

func (x *DocumentRequest) GetDocumentName() string {
	if x != nil {
		return x.DocumentName
	}
	return ""
}

func (x *DocumentRequest) GetPortait() int32 {
	if x != nil {
		return x.Portait
	}
	return 0
}

func (x *DocumentRequest) GetFamilyName() int32 {
	if x != nil {
		return x.FamilyName
	}
	return 0
}

func (x *DocumentRequest) GetGivenName() int32 {
	if x != nil {
		return x.GivenName
	}
	return 0
}

func (x *DocumentRequest) GetResidentAddress() int32 {
	if x != nil {
		return x.ResidentAddress
	}
	return 0
}

func (x *DocumentRequest) GetPersonalNumber() int32 {
	if x != nil {
		return x.PersonalNumber
	}
	return 0
}

func (x *DocumentRequest) GetBirthDate() int32 {
	if x != nil {
		return x.BirthDate
	}
	return 0
}

func (x *DocumentRequest) GetBirthPlace() int32 {
	if x != nil {
		return x.BirthPlace
	}
	return 0
}

func (x *DocumentRequest) GetNationality() int32 {
	if x != nil {
		return x.Nationality
	}
	return 0
}

func (x *DocumentRequest) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *DocumentRequest) GetSignature() int32 {
	if x != nil {
		return x.Signature
	}
	return 0
}

func (x *DocumentRequest) GetDocumentNumber() int32 {
	if x != nil {
		return x.DocumentNumber
	}
	return 0
}

func (x *DocumentRequest) GetIssueDate() int32 {
	if x != nil {
		return x.IssueDate
	}
	return 0
}

func (x *DocumentRequest) GetExpiryDate() int32 {
	if x != nil {
		return x.ExpiryDate
	}
	return 0
}

func (x *DocumentRequest) GetIssuingAuthority() int32 {
	if x != nil {
		return x.IssuingAuthority
	}
	return 0
}

func (x *DocumentRequest) GetChangeOfData() int32 {
	if x != nil {
		return x.ChangeOfData
	}
	return 0
}

func (x *DocumentRequest) GetOfficialRecords() int32 {
	if x != nil {
		return x.OfficialRecords
	}
	return 0
}

func (x *DocumentRequest) GetMaritalStatus() int32 {
	if x != nil {
		return x.MaritalStatus
	}
	return 0
}

func (x *DocumentRequest) GetTitle() int32 {
	if x != nil {
		return x.Title
	}
	return 0
}

func (x *DocumentRequest) GetAgeOver15() int32 {
	if x != nil {
		return x.AgeOver15
	}
	return 0
}

func (x *DocumentRequest) GetAgeOver18() int32 {
	if x != nil {
		return x.AgeOver18
	}
	return 0
}

func (x *DocumentRequest) GetAgeOver21() int32 {
	if x != nil {
		return x.AgeOver21
	}
	return 0
}

func (x *DocumentRequest) GetAgeOver60() int32 {
	if x != nil {
		return x.AgeOver60
	}
	return 0
}

func (x *DocumentRequest) GetAgeOver65() int32 {
	if x != nil {
		return x.AgeOver65
	}
	return 0
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           string              `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	State        string              `protobuf:"bytes,2,opt,name=State,proto3" json:"State,omitempty"`
	ValidTo      string              `protobuf:"bytes,3,opt,name=ValidTo,proto3" json:"ValidTo,omitempty"`
	ResultStatus string              `protobuf:"bytes,4,opt,name=ResultStatus,proto3" json:"ResultStatus,omitempty"`
	Documents    []*DocumentResponse `protobuf:"bytes,5,rep,name=Documents,proto3" json:"Documents,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	mi := &file_DPService_CZ_Edoklady_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_DPService_CZ_Edoklady_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_DPService_CZ_Edoklady_proto_rawDescGZIP(), []int{8}
}

func (x *Transaction) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Transaction) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Transaction) GetValidTo() string {
	if x != nil {
		return x.ValidTo
	}
	return ""
}

func (x *Transaction) GetResultStatus() string {
	if x != nil {
		return x.ResultStatus
	}
	return ""
}

func (x *Transaction) GetDocuments() []*DocumentResponse {
	if x != nil {
		return x.Documents
	}
	return nil
}

type DocumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentName     string `protobuf:"bytes,1,opt,name=DocumentName,proto3" json:"DocumentName,omitempty"`
	Portait          string `protobuf:"bytes,2,opt,name=Portait,proto3" json:"Portait,omitempty"`
	FamilyName       string `protobuf:"bytes,3,opt,name=FamilyName,proto3" json:"FamilyName,omitempty"`
	GivenName        string `protobuf:"bytes,4,opt,name=GivenName,proto3" json:"GivenName,omitempty"`
	ResidentAddress  string `protobuf:"bytes,5,opt,name=ResidentAddress,proto3" json:"ResidentAddress,omitempty"`
	PersonalNumber   string `protobuf:"bytes,6,opt,name=PersonalNumber,proto3" json:"PersonalNumber,omitempty"`
	BirthDate        string `protobuf:"bytes,7,opt,name=BirthDate,proto3" json:"BirthDate,omitempty"`
	BirthPlace       string `protobuf:"bytes,8,opt,name=BirthPlace,proto3" json:"BirthPlace,omitempty"`
	Nationality      string `protobuf:"bytes,9,opt,name=Nationality,proto3" json:"Nationality,omitempty"`
	Sex              string `protobuf:"bytes,10,opt,name=Sex,proto3" json:"Sex,omitempty"`
	Signature        string `protobuf:"bytes,11,opt,name=Signature,proto3" json:"Signature,omitempty"`
	DocumentNumber   string `protobuf:"bytes,12,opt,name=DocumentNumber,proto3" json:"DocumentNumber,omitempty"`
	IssueDate        string `protobuf:"bytes,13,opt,name=IssueDate,proto3" json:"IssueDate,omitempty"`
	ExpiryDate       string `protobuf:"bytes,14,opt,name=ExpiryDate,proto3" json:"ExpiryDate,omitempty"`
	IssuingAuthority string `protobuf:"bytes,15,opt,name=IssuingAuthority,proto3" json:"IssuingAuthority,omitempty"`
	ChangeOfData     string `protobuf:"bytes,16,opt,name=ChangeOfData,proto3" json:"ChangeOfData,omitempty"`
	OfficialRecords  string `protobuf:"bytes,17,opt,name=OfficialRecords,proto3" json:"OfficialRecords,omitempty"`
	MaritalStatus    string `protobuf:"bytes,18,opt,name=MaritalStatus,proto3" json:"MaritalStatus,omitempty"`
	Title            string `protobuf:"bytes,19,opt,name=Title,proto3" json:"Title,omitempty"`
	AgeOver15        string `protobuf:"bytes,20,opt,name=AgeOver15,proto3" json:"AgeOver15,omitempty"`
	AgeOver18        string `protobuf:"bytes,21,opt,name=AgeOver18,proto3" json:"AgeOver18,omitempty"`
	AgeOver21        string `protobuf:"bytes,22,opt,name=AgeOver21,proto3" json:"AgeOver21,omitempty"`
	AgeOver60        string `protobuf:"bytes,23,opt,name=AgeOver60,proto3" json:"AgeOver60,omitempty"`
	AgeOver65        string `protobuf:"bytes,24,opt,name=AgeOver65,proto3" json:"AgeOver65,omitempty"`
}

func (x *DocumentResponse) Reset() {
	*x = DocumentResponse{}
	mi := &file_DPService_CZ_Edoklady_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DocumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentResponse) ProtoMessage() {}

func (x *DocumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_DPService_CZ_Edoklady_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentResponse.ProtoReflect.Descriptor instead.
func (*DocumentResponse) Descriptor() ([]byte, []int) {
	return file_DPService_CZ_Edoklady_proto_rawDescGZIP(), []int{9}
}

func (x *DocumentResponse) GetDocumentName() string {
	if x != nil {
		return x.DocumentName
	}
	return ""
}

func (x *DocumentResponse) GetPortait() string {
	if x != nil {
		return x.Portait
	}
	return ""
}

func (x *DocumentResponse) GetFamilyName() string {
	if x != nil {
		return x.FamilyName
	}
	return ""
}

func (x *DocumentResponse) GetGivenName() string {
	if x != nil {
		return x.GivenName
	}
	return ""
}

func (x *DocumentResponse) GetResidentAddress() string {
	if x != nil {
		return x.ResidentAddress
	}
	return ""
}

func (x *DocumentResponse) GetPersonalNumber() string {
	if x != nil {
		return x.PersonalNumber
	}
	return ""
}

func (x *DocumentResponse) GetBirthDate() string {
	if x != nil {
		return x.BirthDate
	}
	return ""
}

func (x *DocumentResponse) GetBirthPlace() string {
	if x != nil {
		return x.BirthPlace
	}
	return ""
}

func (x *DocumentResponse) GetNationality() string {
	if x != nil {
		return x.Nationality
	}
	return ""
}

func (x *DocumentResponse) GetSex() string {
	if x != nil {
		return x.Sex
	}
	return ""
}

func (x *DocumentResponse) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *DocumentResponse) GetDocumentNumber() string {
	if x != nil {
		return x.DocumentNumber
	}
	return ""
}

func (x *DocumentResponse) GetIssueDate() string {
	if x != nil {
		return x.IssueDate
	}
	return ""
}

func (x *DocumentResponse) GetExpiryDate() string {
	if x != nil {
		return x.ExpiryDate
	}
	return ""
}

func (x *DocumentResponse) GetIssuingAuthority() string {
	if x != nil {
		return x.IssuingAuthority
	}
	return ""
}

func (x *DocumentResponse) GetChangeOfData() string {
	if x != nil {
		return x.ChangeOfData
	}
	return ""
}

func (x *DocumentResponse) GetOfficialRecords() string {
	if x != nil {
		return x.OfficialRecords
	}
	return ""
}

func (x *DocumentResponse) GetMaritalStatus() string {
	if x != nil {
		return x.MaritalStatus
	}
	return ""
}

func (x *DocumentResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DocumentResponse) GetAgeOver15() string {
	if x != nil {
		return x.AgeOver15
	}
	return ""
}

func (x *DocumentResponse) GetAgeOver18() string {
	if x != nil {
		return x.AgeOver18
	}
	return ""
}

func (x *DocumentResponse) GetAgeOver21() string {
	if x != nil {
		return x.AgeOver21
	}
	return ""
}

func (x *DocumentResponse) GetAgeOver60() string {
	if x != nil {
		return x.AgeOver60
	}
	return ""
}

func (x *DocumentResponse) GetAgeOver65() string {
	if x != nil {
		return x.AgeOver65
	}
	return ""
}

var File_DPService_CZ_Edoklady_proto protoreflect.FileDescriptor

var file_DPService_CZ_Edoklady_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x44, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x43, 0x5a, 0x2d, 0x45,
	0x64, 0x6f, 0x6b, 0x6c, 0x61, 0x64, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a,
	0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x78, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x2d, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x32, 0x0a, 0x0c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x73, 0x22, 0x78, 0x0a, 0x0e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x51, 0x52, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x51, 0x52, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x51, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x55, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x51, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x22, 0x4c, 0x0a,
	0x0f, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x39, 0x0a, 0x0f, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0f, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x7d, 0x0a, 0x12, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x0e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0e, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x09, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xa1, 0x06, 0x0a, 0x0f, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x47, 0x69, 0x76, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x47, 0x69, 0x76, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65,
	0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x42, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x42, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x69,
	0x72, 0x74, 0x68, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x42, 0x69, 0x72, 0x74, 0x68, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x53, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x53, 0x65, 0x78, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x49, 0x73,
	0x73, 0x75, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x22,
	0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x74, 0x61, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x66, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x4f, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x4d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x4d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x67, 0x65, 0x4f,
	0x76, 0x65, 0x72, 0x31, 0x35, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x41, 0x67, 0x65,
	0x4f, 0x76, 0x65, 0x72, 0x31, 0x35, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x67, 0x65, 0x4f, 0x76, 0x65,
	0x72, 0x31, 0x38, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x41, 0x67, 0x65, 0x4f, 0x76,
	0x65, 0x72, 0x31, 0x38, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x32,
	0x31, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x41, 0x67, 0x65, 0x4f, 0x76, 0x65, 0x72,
	0x32, 0x31, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x36, 0x30, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x41, 0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x36, 0x30,
	0x12, 0x1c, 0x0a, 0x09, 0x41, 0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x36, 0x35, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x41, 0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x36, 0x35, 0x22, 0xa2,
	0x01, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x6f, 0x12, 0x22,
	0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0xa2, 0x06, 0x0a, 0x10, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x50, 0x6f, 0x72, 0x74, 0x61, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50,
	0x6f, 0x72, 0x74, 0x61, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x69, 0x76, 0x65, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x69, 0x76, 0x65, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x52,
	0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x69, 0x72, 0x74, 0x68, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x69, 0x72, 0x74, 0x68,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x69, 0x72, 0x74, 0x68, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x69, 0x72, 0x74, 0x68, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x65, 0x78, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x53, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x49, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x49, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x49, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x49, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f,
	0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x72, 0x69, 0x74, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4d,
	0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x31, 0x35, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x31, 0x35,
	0x12, 0x1c, 0x0a, 0x09, 0x41, 0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x31, 0x38, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x31, 0x38, 0x12, 0x1c,
	0x0a, 0x09, 0x41, 0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x32, 0x31, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x41, 0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x32, 0x31, 0x12, 0x1c, 0x0a, 0x09,
	0x41, 0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x36, 0x30, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x41, 0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x36, 0x30, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x67,
	0x65, 0x4f, 0x76, 0x65, 0x72, 0x36, 0x35, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41,
	0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x36, 0x35, 0x32, 0x2c, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x24, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x06, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x0f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x93, 0x01, 0x0a, 0x10, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0d, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x2e, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x1a, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x28, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x12, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0c, 0x2e, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x00, 0x32, 0xdc, 0x02, 0x0a,
	0x0a, 0x43, 0x5a, 0x65, 0x44, 0x6f, 0x6b, 0x6c, 0x61, 0x64, 0x79, 0x12, 0x31, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x10, 0x2e, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3a,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x0f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x0f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x1a, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x37, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x0f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x1a, 0x0f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x13, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0c, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x42, 0x37, 0x5a, 0x35, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x63, 0x7a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x44,
	0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x43, 0x5a, 0x2d, 0x65, 0x44, 0x6f, 0x6b,
	0x6c, 0x61, 0x64, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_DPService_CZ_Edoklady_proto_rawDescOnce sync.Once
	file_DPService_CZ_Edoklady_proto_rawDescData = file_DPService_CZ_Edoklady_proto_rawDesc
)

func file_DPService_CZ_Edoklady_proto_rawDescGZIP() []byte {
	file_DPService_CZ_Edoklady_proto_rawDescOnce.Do(func() {
		file_DPService_CZ_Edoklady_proto_rawDescData = protoimpl.X.CompressGZIP(file_DPService_CZ_Edoklady_proto_rawDescData)
	})
	return file_DPService_CZ_Edoklady_proto_rawDescData
}

var file_DPService_CZ_Edoklady_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_DPService_CZ_Edoklady_proto_goTypes = []any{
	(*Empty)(nil),              // 0: Empty
	(*StatusResponse)(nil),     // 1: StatusResponse
	(*Certificate)(nil),        // 2: Certificate
	(*Certificates)(nil),       // 3: Certificates
	(*VirtualService)(nil),     // 4: VirtualService
	(*VirtualServices)(nil),    // 5: VirtualServices
	(*TransactionRequest)(nil), // 6: TransactionRequest
	(*DocumentRequest)(nil),    // 7: DocumentRequest
	(*Transaction)(nil),        // 8: Transaction
	(*DocumentResponse)(nil),   // 9: DocumentResponse
}
var file_DPService_CZ_Edoklady_proto_depIdxs = []int32{
	4,  // 0: VirtualServices.VirtualServices:type_name -> VirtualService
	4,  // 1: TransactionRequest.VirtualService:type_name -> VirtualService
	7,  // 2: TransactionRequest.Documents:type_name -> DocumentRequest
	9,  // 3: Transaction.Documents:type_name -> DocumentResponse
	0,  // 4: Info.GetInfo:input_type -> Empty
	0,  // 5: CertificateStore.ListCertificates:input_type -> Empty
	2,  // 6: CertificateStore.SetCertificate:input_type -> Certificate
	0,  // 7: CertificateStore.GetCertificate:input_type -> Empty
	0,  // 8: CZeDoklady.ListVirtualServices:input_type -> Empty
	4,  // 9: CZeDoklady.CreateVirtualService:input_type -> VirtualService
	4,  // 10: CZeDoklady.DeleteVirtualService:input_type -> VirtualService
	4,  // 11: CZeDoklady.GetVirtualService:input_type -> VirtualService
	6,  // 12: CZeDoklady.StartServerTransaction:input_type -> TransactionRequest
	8,  // 13: CZeDoklady.GetServerTransaction:input_type -> Transaction
	1,  // 14: Info.GetInfo:output_type -> StatusResponse
	3,  // 15: CertificateStore.ListCertificates:output_type -> Certificates
	0,  // 16: CertificateStore.SetCertificate:output_type -> Empty
	2,  // 17: CertificateStore.GetCertificate:output_type -> Certificate
	5,  // 18: CZeDoklady.ListVirtualServices:output_type -> VirtualServices
	4,  // 19: CZeDoklady.CreateVirtualService:output_type -> VirtualService
	0,  // 20: CZeDoklady.DeleteVirtualService:output_type -> Empty
	4,  // 21: CZeDoklady.GetVirtualService:output_type -> VirtualService
	8,  // 22: CZeDoklady.StartServerTransaction:output_type -> Transaction
	8,  // 23: CZeDoklady.GetServerTransaction:output_type -> Transaction
	14, // [14:24] is the sub-list for method output_type
	4,  // [4:14] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_DPService_CZ_Edoklady_proto_init() }
func file_DPService_CZ_Edoklady_proto_init() {
	if File_DPService_CZ_Edoklady_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_DPService_CZ_Edoklady_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_DPService_CZ_Edoklady_proto_goTypes,
		DependencyIndexes: file_DPService_CZ_Edoklady_proto_depIdxs,
		MessageInfos:      file_DPService_CZ_Edoklady_proto_msgTypes,
	}.Build()
	File_DPService_CZ_Edoklady_proto = out.File
	file_DPService_CZ_Edoklady_proto_rawDesc = nil
	file_DPService_CZ_Edoklady_proto_goTypes = nil
	file_DPService_CZ_Edoklady_proto_depIdxs = nil
}
