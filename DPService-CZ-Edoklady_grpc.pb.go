// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: DPService-CZ-Edoklady.proto

package proto_DPService_CZ_eDoklady

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Info_GetInfo_FullMethodName = "/Info/GetInfo"
)

// InfoClient is the client API for Info service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Info service
type InfoClient interface {
	GetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusResponse, error)
}

type infoClient struct {
	cc grpc.ClientConnInterface
}

func NewInfoClient(cc grpc.ClientConnInterface) InfoClient {
	return &infoClient{cc}
}

func (c *infoClient) GetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, Info_GetInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfoServer is the server API for Info service.
// All implementations must embed UnimplementedInfoServer
// for forward compatibility.
//
// Info service
type InfoServer interface {
	GetInfo(context.Context, *Empty) (*StatusResponse, error)
	mustEmbedUnimplementedInfoServer()
}

// UnimplementedInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInfoServer struct{}

func (UnimplementedInfoServer) GetInfo(context.Context, *Empty) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedInfoServer) mustEmbedUnimplementedInfoServer() {}
func (UnimplementedInfoServer) testEmbeddedByValue()              {}

// UnsafeInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InfoServer will
// result in compilation errors.
type UnsafeInfoServer interface {
	mustEmbedUnimplementedInfoServer()
}

func RegisterInfoServer(s grpc.ServiceRegistrar, srv InfoServer) {
	// If the following call pancis, it indicates UnimplementedInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Info_ServiceDesc, srv)
}

func _Info_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Info_GetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).GetInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Info_ServiceDesc is the grpc.ServiceDesc for Info service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Info_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Info",
	HandlerType: (*InfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _Info_GetInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "DPService-CZ-Edoklady.proto",
}

const (
	CertificateStore_ListCertificates_FullMethodName = "/CertificateStore/ListCertificates"
	CertificateStore_SetCertificate_FullMethodName   = "/CertificateStore/SetCertificate"
	CertificateStore_GetCertificate_FullMethodName   = "/CertificateStore/GetCertificate"
)

// CertificateStoreClient is the client API for CertificateStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Certificate store service
type CertificateStoreClient interface {
	ListCertificates(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Certificates, error)
	SetCertificate(ctx context.Context, in *Certificate, opts ...grpc.CallOption) (*Empty, error)
	GetCertificate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Certificate, error)
}

type certificateStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewCertificateStoreClient(cc grpc.ClientConnInterface) CertificateStoreClient {
	return &certificateStoreClient{cc}
}

func (c *certificateStoreClient) ListCertificates(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Certificates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Certificates)
	err := c.cc.Invoke(ctx, CertificateStore_ListCertificates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateStoreClient) SetCertificate(ctx context.Context, in *Certificate, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CertificateStore_SetCertificate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateStoreClient) GetCertificate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Certificate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Certificate)
	err := c.cc.Invoke(ctx, CertificateStore_GetCertificate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CertificateStoreServer is the server API for CertificateStore service.
// All implementations must embed UnimplementedCertificateStoreServer
// for forward compatibility.
//
// Certificate store service
type CertificateStoreServer interface {
	ListCertificates(context.Context, *Empty) (*Certificates, error)
	SetCertificate(context.Context, *Certificate) (*Empty, error)
	GetCertificate(context.Context, *Empty) (*Certificate, error)
	mustEmbedUnimplementedCertificateStoreServer()
}

// UnimplementedCertificateStoreServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCertificateStoreServer struct{}

func (UnimplementedCertificateStoreServer) ListCertificates(context.Context, *Empty) (*Certificates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCertificates not implemented")
}
func (UnimplementedCertificateStoreServer) SetCertificate(context.Context, *Certificate) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCertificate not implemented")
}
func (UnimplementedCertificateStoreServer) GetCertificate(context.Context, *Empty) (*Certificate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertificate not implemented")
}
func (UnimplementedCertificateStoreServer) mustEmbedUnimplementedCertificateStoreServer() {}
func (UnimplementedCertificateStoreServer) testEmbeddedByValue()                          {}

// UnsafeCertificateStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CertificateStoreServer will
// result in compilation errors.
type UnsafeCertificateStoreServer interface {
	mustEmbedUnimplementedCertificateStoreServer()
}

func RegisterCertificateStoreServer(s grpc.ServiceRegistrar, srv CertificateStoreServer) {
	// If the following call pancis, it indicates UnimplementedCertificateStoreServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CertificateStore_ServiceDesc, srv)
}

func _CertificateStore_ListCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateStoreServer).ListCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CertificateStore_ListCertificates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateStoreServer).ListCertificates(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateStore_SetCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Certificate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateStoreServer).SetCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CertificateStore_SetCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateStoreServer).SetCertificate(ctx, req.(*Certificate))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateStore_GetCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateStoreServer).GetCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CertificateStore_GetCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateStoreServer).GetCertificate(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CertificateStore_ServiceDesc is the grpc.ServiceDesc for CertificateStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CertificateStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CertificateStore",
	HandlerType: (*CertificateStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCertificates",
			Handler:    _CertificateStore_ListCertificates_Handler,
		},
		{
			MethodName: "SetCertificate",
			Handler:    _CertificateStore_SetCertificate_Handler,
		},
		{
			MethodName: "GetCertificate",
			Handler:    _CertificateStore_GetCertificate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "DPService-CZ-Edoklady.proto",
}

const (
	CZeDoklady_ListVirtualServices_FullMethodName    = "/CZeDoklady/ListVirtualServices"
	CZeDoklady_CreateVirtualService_FullMethodName   = "/CZeDoklady/CreateVirtualService"
	CZeDoklady_DeleteVirtualService_FullMethodName   = "/CZeDoklady/DeleteVirtualService"
	CZeDoklady_GetVirtualService_FullMethodName      = "/CZeDoklady/GetVirtualService"
	CZeDoklady_StartServerTransaction_FullMethodName = "/CZeDoklady/StartServerTransaction"
	CZeDoklady_GetServerTransaction_FullMethodName   = "/CZeDoklady/GetServerTransaction"
)

// CZeDokladyClient is the client API for CZeDoklady service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CZ eDoklady service
type CZeDokladyClient interface {
	ListVirtualServices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*VirtualServices, error)
	CreateVirtualService(ctx context.Context, in *VirtualService, opts ...grpc.CallOption) (*VirtualService, error)
	DeleteVirtualService(ctx context.Context, in *VirtualService, opts ...grpc.CallOption) (*Empty, error)
	GetVirtualService(ctx context.Context, in *VirtualService, opts ...grpc.CallOption) (*VirtualService, error)
	StartServerTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*Transaction, error)
	GetServerTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Transaction, error)
}

type cZeDokladyClient struct {
	cc grpc.ClientConnInterface
}

func NewCZeDokladyClient(cc grpc.ClientConnInterface) CZeDokladyClient {
	return &cZeDokladyClient{cc}
}

func (c *cZeDokladyClient) ListVirtualServices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*VirtualServices, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VirtualServices)
	err := c.cc.Invoke(ctx, CZeDoklady_ListVirtualServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cZeDokladyClient) CreateVirtualService(ctx context.Context, in *VirtualService, opts ...grpc.CallOption) (*VirtualService, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VirtualService)
	err := c.cc.Invoke(ctx, CZeDoklady_CreateVirtualService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cZeDokladyClient) DeleteVirtualService(ctx context.Context, in *VirtualService, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CZeDoklady_DeleteVirtualService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cZeDokladyClient) GetVirtualService(ctx context.Context, in *VirtualService, opts ...grpc.CallOption) (*VirtualService, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VirtualService)
	err := c.cc.Invoke(ctx, CZeDoklady_GetVirtualService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cZeDokladyClient) StartServerTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*Transaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Transaction)
	err := c.cc.Invoke(ctx, CZeDoklady_StartServerTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cZeDokladyClient) GetServerTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Transaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Transaction)
	err := c.cc.Invoke(ctx, CZeDoklady_GetServerTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CZeDokladyServer is the server API for CZeDoklady service.
// All implementations must embed UnimplementedCZeDokladyServer
// for forward compatibility.
//
// CZ eDoklady service
type CZeDokladyServer interface {
	ListVirtualServices(context.Context, *Empty) (*VirtualServices, error)
	CreateVirtualService(context.Context, *VirtualService) (*VirtualService, error)
	DeleteVirtualService(context.Context, *VirtualService) (*Empty, error)
	GetVirtualService(context.Context, *VirtualService) (*VirtualService, error)
	StartServerTransaction(context.Context, *TransactionRequest) (*Transaction, error)
	GetServerTransaction(context.Context, *Transaction) (*Transaction, error)
	mustEmbedUnimplementedCZeDokladyServer()
}

// UnimplementedCZeDokladyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCZeDokladyServer struct{}

func (UnimplementedCZeDokladyServer) ListVirtualServices(context.Context, *Empty) (*VirtualServices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVirtualServices not implemented")
}
func (UnimplementedCZeDokladyServer) CreateVirtualService(context.Context, *VirtualService) (*VirtualService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVirtualService not implemented")
}
func (UnimplementedCZeDokladyServer) DeleteVirtualService(context.Context, *VirtualService) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVirtualService not implemented")
}
func (UnimplementedCZeDokladyServer) GetVirtualService(context.Context, *VirtualService) (*VirtualService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVirtualService not implemented")
}
func (UnimplementedCZeDokladyServer) StartServerTransaction(context.Context, *TransactionRequest) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartServerTransaction not implemented")
}
func (UnimplementedCZeDokladyServer) GetServerTransaction(context.Context, *Transaction) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerTransaction not implemented")
}
func (UnimplementedCZeDokladyServer) mustEmbedUnimplementedCZeDokladyServer() {}
func (UnimplementedCZeDokladyServer) testEmbeddedByValue()                    {}

// UnsafeCZeDokladyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CZeDokladyServer will
// result in compilation errors.
type UnsafeCZeDokladyServer interface {
	mustEmbedUnimplementedCZeDokladyServer()
}

func RegisterCZeDokladyServer(s grpc.ServiceRegistrar, srv CZeDokladyServer) {
	// If the following call pancis, it indicates UnimplementedCZeDokladyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CZeDoklady_ServiceDesc, srv)
}

func _CZeDoklady_ListVirtualServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CZeDokladyServer).ListVirtualServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CZeDoklady_ListVirtualServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CZeDokladyServer).ListVirtualServices(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CZeDoklady_CreateVirtualService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CZeDokladyServer).CreateVirtualService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CZeDoklady_CreateVirtualService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CZeDokladyServer).CreateVirtualService(ctx, req.(*VirtualService))
	}
	return interceptor(ctx, in, info, handler)
}

func _CZeDoklady_DeleteVirtualService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CZeDokladyServer).DeleteVirtualService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CZeDoklady_DeleteVirtualService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CZeDokladyServer).DeleteVirtualService(ctx, req.(*VirtualService))
	}
	return interceptor(ctx, in, info, handler)
}

func _CZeDoklady_GetVirtualService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CZeDokladyServer).GetVirtualService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CZeDoklady_GetVirtualService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CZeDokladyServer).GetVirtualService(ctx, req.(*VirtualService))
	}
	return interceptor(ctx, in, info, handler)
}

func _CZeDoklady_StartServerTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CZeDokladyServer).StartServerTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CZeDoklady_StartServerTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CZeDokladyServer).StartServerTransaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CZeDoklady_GetServerTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CZeDokladyServer).GetServerTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CZeDoklady_GetServerTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CZeDokladyServer).GetServerTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

// CZeDoklady_ServiceDesc is the grpc.ServiceDesc for CZeDoklady service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CZeDoklady_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CZeDoklady",
	HandlerType: (*CZeDokladyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListVirtualServices",
			Handler:    _CZeDoklady_ListVirtualServices_Handler,
		},
		{
			MethodName: "CreateVirtualService",
			Handler:    _CZeDoklady_CreateVirtualService_Handler,
		},
		{
			MethodName: "DeleteVirtualService",
			Handler:    _CZeDoklady_DeleteVirtualService_Handler,
		},
		{
			MethodName: "GetVirtualService",
			Handler:    _CZeDoklady_GetVirtualService_Handler,
		},
		{
			MethodName: "StartServerTransaction",
			Handler:    _CZeDoklady_StartServerTransaction_Handler,
		},
		{
			MethodName: "GetServerTransaction",
			Handler:    _CZeDoklady_GetServerTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "DPService-CZ-Edoklady.proto",
}
